#!/bin/bash

##############################################
# Script de mise √† jour automatique sur LWS
# Projet : HorizonImmo / ZB Investments
# Usage : ./deploy-update.sh
##############################################

echo "üöÄ D√©marrage de la mise √† jour du projet sur LWS..."
echo ""

# Couleurs pour les messages
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Variables
APP_DIR="/home/zbinv2677815/laravel-app"

# V√©rifier qu'on est dans le bon dossier
if [ ! -d "$APP_DIR" ]; then
    echo -e "${RED}‚ùå Erreur : Le dossier $APP_DIR n'existe pas${NC}"
    exit 1
fi

cd $APP_DIR

echo -e "${BLUE}üìÇ Dossier actuel : $(pwd)${NC}"
echo ""

# √âtape 1 : Sauvegarder les fichiers critiques
echo -e "${YELLOW}üíæ Sauvegarde du fichier .env...${NC}"
cp .env .env.backup.$(date +%Y%m%d_%H%M%S)
echo -e "${GREEN}‚úÖ Sauvegarde cr√©√©e${NC}"
echo ""

# √âtape 2 : R√©cup√©rer les derni√®res modifications depuis Git
echo -e "${YELLOW}üîÑ R√©cup√©ration des derni√®res modifications depuis Git...${NC}"
git fetch origin
BEHIND=$(git rev-list HEAD..origin/main --count)

if [ "$BEHIND" -gt 0 ]; then
    echo -e "${BLUE}üì• $BEHIND nouveau(x) commit(s) √† r√©cup√©rer${NC}"
    git pull origin main
    echo -e "${GREEN}‚úÖ Code mis √† jour${NC}"
else
    echo -e "${GREEN}‚úÖ Le code est d√©j√† √† jour${NC}"
fi
echo ""

# √âtape 3 : Mettre √† jour les d√©pendances Composer (si n√©cessaire)
echo -e "${YELLOW}üì¶ V√©rification des d√©pendances Composer...${NC}"
if [ -f "composer.lock" ]; then
    composer install --no-dev --optimize-autoloader --no-interaction
    echo -e "${GREEN}‚úÖ D√©pendances install√©es${NC}"
else
    echo -e "${BLUE}‚ÑπÔ∏è  Aucune mise √† jour de d√©pendances n√©cessaire${NC}"
fi
echo ""

# √âtape 4 : Vider tous les caches
echo -e "${YELLOW}üßπ Vidage des caches Laravel...${NC}"
php artisan config:clear
echo -e "${GREEN}  ‚úì Cache de configuration vid√©${NC}"

php artisan cache:clear
echo -e "${GREEN}  ‚úì Cache de l'application vid√©${NC}"

php artisan view:clear
echo -e "${GREEN}  ‚úì Cache des vues vid√©${NC}"

php artisan route:clear
echo -e "${GREEN}  ‚úì Cache des routes vid√©${NC}"

php artisan event:clear 2>/dev/null
echo -e "${GREEN}  ‚úì Cache des √©v√©nements vid√©${NC}"

echo -e "${GREEN}‚úÖ Tous les caches vid√©s${NC}"
echo ""

# √âtape 5 : Reconstruire les caches (optimisation)
echo -e "${YELLOW}‚ö° Reconstruction des caches pour optimiser les performances...${NC}"
php artisan config:cache
echo -e "${GREEN}  ‚úì Configuration mise en cache${NC}"

php artisan route:cache
echo -e "${GREEN}  ‚úì Routes mises en cache${NC}"

php artisan view:cache
echo -e "${GREEN}  ‚úì Vues mises en cache${NC}"

echo -e "${GREEN}‚úÖ Caches reconstruits${NC}"
echo ""

# √âtape 6 : V√©rifier les permissions
echo -e "${YELLOW}üîê V√©rification des permissions...${NC}"
chmod -R 775 storage
chmod -R 775 bootstrap/cache
echo -e "${GREEN}‚úÖ Permissions configur√©es${NC}"
echo ""

# √âtape 7 : Afficher les informations de version
echo -e "${BLUE}‚ÑπÔ∏è  Informations de version :${NC}"
echo -e "  PHP : $(php -v | head -n 1)"
echo -e "  Laravel : $(php artisan --version)"
echo -e "  Git : $(git log -1 --pretty=format:'%h - %s (%cr)')"
echo ""

# Fin
echo -e "${GREEN}üéâ Mise √† jour termin√©e avec succ√®s !${NC}"
echo ""
echo -e "${BLUE}üìã Prochaines √©tapes recommand√©es :${NC}"
echo "  1. Tester le site : https://votre-domaine.com"
echo "  2. V√©rifier les logs : tail -f storage/logs/laravel.log"
echo "  3. Tester l'envoi d'emails"
echo ""
echo -e "${YELLOW}‚ö†Ô∏è  En cas de probl√®me :${NC}"
echo "  - Consulter les logs : storage/logs/laravel.log"
echo "  - Restaurer le .env : cp .env.backup.* .env"
echo "  - Revider les caches : php artisan optimize:clear"
echo ""
